using Meep.Tech.Data;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

namespace Indra.Data {

  /// <summary>
  /// A command for a type generated by the ModelCommandAttribute.
  /// Use ICommandType.GetFromMethod to get the archetypes for these.
  /// </summary>
  public interface IAutoGeneratedCommand : ICommand {
    internal Dictionary<string, object> _data { get; set; }
  }

  /// <summary>
  /// A command generated by the ModelCommandAttribute.
  /// Use ICommandType.GetFromMethod to get these archetypes.
  /// </summary>
  public interface IAutoGeneratedCommandType : ICommandType {
  }

  /// <summary>
  /// A command for a type generated by the ModelCommandAttribute.
  /// Use ICommandType.GetFromMethod to get the archetypes for these.
  /// </summary>
  public sealed class AutoGeneratedCommand<TActsOn> : Command<TActsOn>, IAutoGeneratedCommand
    where TActsOn : class, IModel {
    Dictionary<string, object> IAutoGeneratedCommand._data { get; set; } = new();

    /// <summary>
    /// A command type generated by the ModelCommandAttribute.
    /// Use ICommandType.GetFromMethod to get these archetypes.
    /// </summary>
    [Branch]
    public new sealed class Type : Command<TActsOn>.Type, IAutoGeneratedCommandType {
      Action<Command<TActsOn>, IModel, IActor, ILocation, IReadOnlyDictionary<Parameter.Data, Parameter>> _executeLogic { get; }
      Action<Command<TActsOn>, IActor, ILocation> _undoLogic { get; }
      Func<Command<TActsOn>, IModel, IActor, ILocation, bool> _canBeSeenLogic { get; }

      readonly Proximity _requiredProximity = new();
      readonly System.Type _returnType;
      readonly bool _canBeUndone;

      ///<summary><inheritdoc/></summary>
      public override System.Type RequiredProximity
        => typeof(Room);

      ///<summary><inheritdoc/></summary>
      public override System.Type ReturnType
        => _returnType;

      ///<summary><inheritdoc/></summary>
      public override bool CanBeUndone
        => _canBeUndone;

      internal Type(
        string commandName,
        string description,
        IReadOnlyList<Parameter.Data> parameters,
        Action<ICommand, IModel, IActor, ILocation, IReadOnlyDictionary<Parameter.Data, Parameter>> execute,
        Action<ICommand, IActor, ILocation> undo,
        Func<ICommand, IModel, IActor, ILocation, bool> canBeSeen,
        Proximity requiredProximity,
        System.Type returnType,
        bool canBeUndone
      ) : base(new Identity(commandName, keyOverride: ICommandType.GetMemberCommandKey(typeof(TActsOn), commandName)), description, parameters) {
        _executeLogic = execute;
        _undoLogic = undo;
        _canBeSeenLogic = canBeSeen;
        _requiredProximity = requiredProximity ?? _requiredProximity;
        _returnType = returnType;
        _canBeUndone = canBeUndone;
      }

      ///<summary><inheritdoc/></summary>
      protected internal override void Execute(Command<TActsOn> command, TActsOn model, IActor executor, ILocation location, IReadOnlyDictionary<Parameter.Data, Parameter> withParams)
        => _executeLogic(command, model, executor, location, withParams);

      ///<summary><inheritdoc/></summary>
      protected internal override void Undo(Command<TActsOn> executedCommand, IActor undoer, ILocation undoFromLocation)
        => _undoLogic(executedCommand, undoer, undoFromLocation);

      ///<summary><inheritdoc/></summary>
      protected internal override bool CommandIsVisibleToActor(Command<TActsOn> command, IActor actor, TActsOn target, Place location) 
        => _canBeSeenLogic(command, target, actor, location);

      internal static IAutoGeneratedCommandType _buildAutoGeneratedCommand(
        string commandName,
        string description,
        System.Type targetModelType,
        IReadOnlyList<Parameter.Data> parameters,
        Action<ICommand, IModel, IActor, ILocation, IReadOnlyDictionary<Parameter.Data, Parameter>> execute,
        Action<ICommand, IActor, ILocation> undo,
        Func<ICommand, IModel, IActor, ILocation, bool> canBeSeen,
        Proximity requiredProximity,
        System.Type returnType,
        bool canBeUndone
      ) {
        System.Type commandArchetypeClass = typeof(AutoGeneratedCommand<>).MakeGenericType(targetModelType);
        ConstructorInfo commandTypeCtor = commandArchetypeClass.GetConstructors().Single();

        return (IAutoGeneratedCommandType)commandTypeCtor.Invoke(new object[] {
          ICommandType.CleanCommandName(commandName),
          description,
          parameters,
          execute,
          undo,
          canBeSeen,
          requiredProximity,
          returnType,
          canBeUndone
        });
      }
    }
  }
}
